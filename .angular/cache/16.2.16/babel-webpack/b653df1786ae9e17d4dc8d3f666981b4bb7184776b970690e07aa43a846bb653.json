{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let MetalRateComponent = class MetalRateComponent {\n  constructor(metalRateService, metalService, purityService) {\n    this.metalRateService = metalRateService;\n    this.metalService = metalService;\n    this.purityService = purityService;\n    this.metalRates = [];\n    this.metalMap = new Map();\n    this.purityMap = new Map();\n  }\n  ngOnInit() {\n    this.loadMetadata();\n    this.loadRates();\n  }\n  loadMetadata() {\n    this.metalService.getAllMetals().subscribe({\n      next: metals => {\n        metals.forEach(metal => {\n          if (metal.id) this.metalMap.set(metal.id, metal);\n        });\n      },\n      error: err => console.error('Failed to load metals', err)\n    });\n    this.purityService.getAllpurity().subscribe({\n      next: purities => {\n        purities.forEach(purity => {\n          if (purity.id) this.purityMap.set(purity.id, purity);\n        });\n      },\n      error: err => console.error('Failed to load purities', err)\n    });\n  }\n  loadRates() {\n    this.metalRateService.getAllMetalRates().subscribe({\n      next: rates => this.metalRates = rates,\n      error: err => console.error('Failed to load metal rates', err)\n    });\n  }\n  getMetalName(id) {\n    return this.metalMap.get(id)?.name ?? 'Unknown Metal';\n  }\n  getMetalSymbol(id) {\n    return this.metalMap.get(id)?.symbol ?? '–';\n  }\n  getPurityValue(id) {\n    const value = this.purityMap.get(id)?.value;\n    return typeof value === 'number' ? value.toFixed(2) : '–';\n  }\n};\nMetalRateComponent = __decorate([Component({\n  selector: 'app-metal-rate',\n  templateUrl: './metal-rate.component.html',\n  styleUrls: ['./metal-rate.component.css'] // Optional: if using styles\n})], MetalRateComponent);","map":{"version":3,"names":["Component","MetalRateComponent","constructor","metalRateService","metalService","purityService","metalRates","metalMap","Map","purityMap","ngOnInit","loadMetadata","loadRates","getAllMetals","subscribe","next","metals","forEach","metal","id","set","error","err","console","getAllpurity","purities","purity","getAllMetalRates","rates","getMetalName","get","name","getMetalSymbol","symbol","getPurityValue","value","toFixed","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\javacode\\metal-purity-ui\\src\\app\\metal-rate\\metal-rate-list\\metal-rate-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { MetalRateService, MetalRate } from '../../metal-rate/metal-rate.service';\r\nimport { MetalService, Metal } from '../../metal/metal.service';\r\nimport { PurityService, Purity } from '../../purity/purity.service';\r\n\r\n@Component({\r\n  selector: 'app-metal-rate',\r\n  templateUrl: './metal-rate.component.html',\r\n  styleUrls: ['./metal-rate.component.css'] // Optional: if using styles\r\n})\r\nexport class MetalRateComponent implements OnInit {\r\n  metalRates: MetalRate[] = [];\r\n\r\n  metalMap: Map<string, Metal> = new Map();\r\n  purityMap: Map<string, Purity> = new Map();\r\n\r\n  constructor(\r\n    private metalRateService: MetalRateService,\r\n    private metalService: MetalService,\r\n    private purityService: PurityService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadMetadata();\r\n    this.loadRates();\r\n  }\r\n\r\n  private loadMetadata(): void {\r\n    this.metalService.getAllMetals().subscribe({\r\n      next: metals => {\r\n        metals.forEach(metal => {\r\n          if (metal.id) this.metalMap.set(metal.id, metal);\r\n        });\r\n      },\r\n      error: err => console.error('Failed to load metals', err)\r\n    });\r\n\r\n    this.purityService.getAllpurity().subscribe({\r\n      next: purities => {\r\n        purities.forEach(purity => {\r\n          if (purity.id) this.purityMap.set(purity.id, purity);\r\n        });\r\n      },\r\n      error: err => console.error('Failed to load purities', err)\r\n    });\r\n  }\r\n\r\n  private loadRates(): void {\r\n    this.metalRateService.getAllMetalRates().subscribe({\r\n      next: rates => (this.metalRates = rates),\r\n      error: err => console.error('Failed to load metal rates', err)\r\n    });\r\n  }\r\n\r\n  getMetalName(id: string): string {\r\n    return this.metalMap.get(id)?.name ?? 'Unknown Metal';\r\n  }\r\n\r\n  getMetalSymbol(id: string): string {\r\n    return this.metalMap.get(id)?.symbol ?? '–';\r\n  }\r\n\r\n  getPurityValue(id: string): string {\r\n    const value = this.purityMap.get(id)?.value;\r\n    return typeof value === 'number' ? value.toFixed(2) : '–';\r\n  }\r\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAM7BC,YACUC,gBAAkC,EAClCC,YAA0B,EAC1BC,aAA4B;IAF5B,KAAAF,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,aAAa,GAAbA,aAAa;IARvB,KAAAC,UAAU,GAAgB,EAAE;IAE5B,KAAAC,QAAQ,GAAuB,IAAIC,GAAG,EAAE;IACxC,KAAAC,SAAS,GAAwB,IAAID,GAAG,EAAE;EAMvC;EAEHE,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAACC,SAAS,EAAE;EAClB;EAEQD,YAAYA,CAAA;IAClB,IAAI,CAACP,YAAY,CAACS,YAAY,EAAE,CAACC,SAAS,CAAC;MACzCC,IAAI,EAAEC,MAAM,IAAG;QACbA,MAAM,CAACC,OAAO,CAACC,KAAK,IAAG;UACrB,IAAIA,KAAK,CAACC,EAAE,EAAE,IAAI,CAACZ,QAAQ,CAACa,GAAG,CAACF,KAAK,CAACC,EAAE,EAAED,KAAK,CAAC;QAClD,CAAC,CAAC;MACJ,CAAC;MACDG,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEC,GAAG;KACzD,CAAC;IAEF,IAAI,CAACjB,aAAa,CAACmB,YAAY,EAAE,CAACV,SAAS,CAAC;MAC1CC,IAAI,EAAEU,QAAQ,IAAG;QACfA,QAAQ,CAACR,OAAO,CAACS,MAAM,IAAG;UACxB,IAAIA,MAAM,CAACP,EAAE,EAAE,IAAI,CAACV,SAAS,CAACW,GAAG,CAACM,MAAM,CAACP,EAAE,EAAEO,MAAM,CAAC;QACtD,CAAC,CAAC;MACJ,CAAC;MACDL,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAAC,yBAAyB,EAAEC,GAAG;KAC3D,CAAC;EACJ;EAEQV,SAASA,CAAA;IACf,IAAI,CAACT,gBAAgB,CAACwB,gBAAgB,EAAE,CAACb,SAAS,CAAC;MACjDC,IAAI,EAAEa,KAAK,IAAK,IAAI,CAACtB,UAAU,GAAGsB,KAAM;MACxCP,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAAC,4BAA4B,EAAEC,GAAG;KAC9D,CAAC;EACJ;EAEAO,YAAYA,CAACV,EAAU;IACrB,OAAO,IAAI,CAACZ,QAAQ,CAACuB,GAAG,CAACX,EAAE,CAAC,EAAEY,IAAI,IAAI,eAAe;EACvD;EAEAC,cAAcA,CAACb,EAAU;IACvB,OAAO,IAAI,CAACZ,QAAQ,CAACuB,GAAG,CAACX,EAAE,CAAC,EAAEc,MAAM,IAAI,GAAG;EAC7C;EAEAC,cAAcA,CAACf,EAAU;IACvB,MAAMgB,KAAK,GAAG,IAAI,CAAC1B,SAAS,CAACqB,GAAG,CAACX,EAAE,CAAC,EAAEgB,KAAK;IAC3C,OAAO,OAAOA,KAAK,KAAK,QAAQ,GAAGA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;EAC3D;CACD;AAxDYnC,kBAAkB,GAAAoC,UAAA,EAL9BrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B,CAAC,CAAC;CAC3C,CAAC,C,EACWvC,kBAAkB,CAwD9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}