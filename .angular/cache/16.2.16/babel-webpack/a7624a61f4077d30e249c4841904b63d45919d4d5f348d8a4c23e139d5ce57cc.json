{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/api.service\";\nexport class UserService {\n  constructor(api) {\n    this.api = api;\n    this.endpoint = 'users'; // Frontend -> /api/users (via ApiService)\n  }\n  // üîç Get all users with pagination, sorting, and optional search\n  getAllUsers(page = 0, size = 10, sortBy = 'name', direction = 'asc', search = '') {\n    const params = {\n      page,\n      size,\n      sortBy,\n      direction,\n      search\n    };\n    return this.api.get(this.endpoint, params);\n  }\n  // ‚ûï Create a new user\n  createUser(user) {\n    return this.api.post(this.endpoint, user);\n  }\n  // ‚úèÔ∏è Update user by ID\n  updateUser(id, user) {\n    return this.api.put(this.endpoint, id, user);\n  }\n  // ‚ùå Delete user by ID\n  deleteUser(id) {\n    return this.api.delete(this.endpoint, id);\n  }\n  // üßπ Bulk delete users\n  deleteManyUsers(ids) {\n    return this.api.post(`${this.endpoint}/deleteMany`, ids);\n  }\n  // üîç Get user by ID\n  getUserById(id) {\n    return this.api.get(`${this.endpoint}/${id}`);\n  }\n  static {\n    this.…µfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.…µ…µinject(i1.ApiService));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: UserService,\n      factory: UserService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["UserService","constructor","api","endpoint","getAllUsers","page","size","sortBy","direction","search","params","get","createUser","user","post","updateUser","id","put","deleteUser","delete","deleteManyUsers","ids","getUserById","i0","…µ…µinject","i1","ApiService","factory","…µfac","providedIn"],"sources":["D:\\javacode\\angular-crud-ui\\src\\app\\user\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiService } from '../shared/api.service';\r\n\r\nexport interface User {\r\n  id?: string;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private endpoint = 'users'; // Frontend -> /api/users (via ApiService)\r\n\r\n  constructor(private api: ApiService) {}\r\n\r\n  // üîç Get all users with pagination, sorting, and optional search\r\n  getAllUsers(\r\n    page: number = 0,\r\n    size: number = 10,\r\n    sortBy: string = 'name',\r\n    direction: 'asc' | 'desc' = 'asc',\r\n    search: string = ''\r\n  ): Observable<PagedResult<User>> {\r\n    const params = {\r\n      page,\r\n      size,\r\n      sortBy,\r\n      direction,\r\n      search\r\n    };\r\n    return this.api.get<PagedResult<User>>(this.endpoint, params);\r\n  }\r\n\r\n  // ‚ûï Create a new user\r\n  createUser(user: User): Observable<User> {\r\n    return this.api.post<User>(this.endpoint, user);\r\n  }\r\n\r\n  // ‚úèÔ∏è Update user by ID\r\n  updateUser(id: string, user: User): Observable<User> {\r\n    return this.api.put<User>(this.endpoint, id, user);\r\n  }\r\n\r\n  // ‚ùå Delete user by ID\r\n  deleteUser(id: string): Observable<void> {\r\n    return this.api.delete<void>(this.endpoint, id);\r\n  }\r\n\r\n  // üßπ Bulk delete users\r\n  deleteManyUsers(ids: string[]): Observable<void> {\r\n    return this.api.post<void>(`${this.endpoint}/deleteMany`, ids);\r\n  }\r\n\r\n  // üîç Get user by ID\r\n  getUserById(id: string): Observable<User> {\r\n    return this.api.get<User>(`${this.endpoint}/${id}`);\r\n  }\r\n}\r\n\r\n// ‚úÖ Optional: PagedResult interface for paginated responses\r\nexport interface PagedResult<T> {\r\n  content: T[];\r\n  totalElements: number;\r\n  totalPages: number;\r\n  number: number; // current page\r\n}"],"mappings":";;AAaA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,GAAe;IAAf,KAAAA,GAAG,GAAHA,GAAG;IAFf,KAAAC,QAAQ,GAAG,OAAO,CAAC,CAAC;EAEU;EAEtC;EACAC,WAAWA,CACTC,IAAA,GAAe,CAAC,EAChBC,IAAA,GAAe,EAAE,EACjBC,MAAA,GAAiB,MAAM,EACvBC,SAAA,GAA4B,KAAK,EACjCC,MAAA,GAAiB,EAAE;IAEnB,MAAMC,MAAM,GAAG;MACbL,IAAI;MACJC,IAAI;MACJC,MAAM;MACNC,SAAS;MACTC;KACD;IACD,OAAO,IAAI,CAACP,GAAG,CAACS,GAAG,CAAoB,IAAI,CAACR,QAAQ,EAAEO,MAAM,CAAC;EAC/D;EAEA;EACAE,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACX,GAAG,CAACY,IAAI,CAAO,IAAI,CAACX,QAAQ,EAAEU,IAAI,CAAC;EACjD;EAEA;EACAE,UAAUA,CAACC,EAAU,EAAEH,IAAU;IAC/B,OAAO,IAAI,CAACX,GAAG,CAACe,GAAG,CAAO,IAAI,CAACd,QAAQ,EAAEa,EAAE,EAAEH,IAAI,CAAC;EACpD;EAEA;EACAK,UAAUA,CAACF,EAAU;IACnB,OAAO,IAAI,CAACd,GAAG,CAACiB,MAAM,CAAO,IAAI,CAAChB,QAAQ,EAAEa,EAAE,CAAC;EACjD;EAEA;EACAI,eAAeA,CAACC,GAAa;IAC3B,OAAO,IAAI,CAACnB,GAAG,CAACY,IAAI,CAAO,GAAG,IAAI,CAACX,QAAQ,aAAa,EAAEkB,GAAG,CAAC;EAChE;EAEA;EACAC,WAAWA,CAACN,EAAU;IACpB,OAAO,IAAI,CAACd,GAAG,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,QAAQ,IAAIa,EAAE,EAAE,CAAC;EACrD;;;uBA9CWhB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX1B,WAAW;MAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}