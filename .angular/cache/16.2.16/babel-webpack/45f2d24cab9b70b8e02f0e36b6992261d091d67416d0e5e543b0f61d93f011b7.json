{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/api.service\";\nexport class PurityService {\n  // private apiUrl = `${environment.apiBaseUrl}/purity`;\n  constructor(api) {\n    this.api = api;\n    this.endpoint = 'purity';\n  }\n  getAllpurity() {\n    return this.api.get(this.endpoint);\n  }\n  createPurity(purity) {\n    return this.api.post(this.endpoint, purity);\n  }\n  updatePurity(id, purity) {\n    return this.api.put(this.endpoint, id, purity);\n  }\n  deletePurity(id) {\n    return this.api.delete(this.endpoint, id);\n  }\n  getFilteredUsers(fromDate, toDate) {\n    let query = {};\n    if (fromDate) query.from = fromDate;\n    if (toDate) query.to = toDate;\n    return this.api.get(`${this.endpoint}/filter`, query);\n  }\n  static {\n    this.ɵfac = function PurityService_Factory(t) {\n      return new (t || PurityService)(i0.ɵɵinject(i1.ApiService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PurityService,\n      factory: PurityService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["PurityService","constructor","api","endpoint","getAllpurity","get","createPurity","purity","post","updatePurity","id","put","deletePurity","delete","getFilteredUsers","fromDate","toDate","query","from","to","i0","ɵɵinject","i1","ApiService","factory","ɵfac","providedIn"],"sources":["D:\\javacode\\angular-crud-ui\\src\\app\\purity\\purity.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ApiService } from '../shared/api.service';\r\n\r\nexport interface Purity {\r\n  id?: string;\r\n  name: string;\r\n  value: number;\r\n  createdAt?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PurityService {\r\n   private endpoint = 'purity';\r\n  // private apiUrl = `${environment.apiBaseUrl}/purity`;\r\n\r\n  constructor(private api: ApiService) { }\r\n\r\n  getAllpurity(): Observable<Purity[]> {\r\n    return this.api.get<Purity[]>(this.endpoint);\r\n  }\r\n\r\n  createPurity(purity: Purity): Observable<Purity> {\r\n    return this.api.post<Purity>(this.endpoint, purity);\r\n  }\r\n\r\n  updatePurity(id: string, purity: Purity): Observable<Purity> {\r\n    return this.api.put<Purity>(this.endpoint, id, purity);\r\n  }\r\n\r\n  deletePurity(id: string): Observable<void> {\r\n    return this.api.delete<void>(this.endpoint, id,);\r\n  }\r\n  getFilteredUsers(fromDate?: string, toDate?: string): Observable<Purity[]> {\r\n    let query: any = {};\r\n    if (fromDate) query.from = fromDate;\r\n    if (toDate) query.to = toDate;\r\n    return this.api.get<Purity[]>(`${this.endpoint}/filter`, query);\r\n}\r\n}"],"mappings":";;AAgBA,OAAM,MAAOA,aAAa;EAExB;EAEAC,YAAoBC,GAAe;IAAf,KAAAA,GAAG,GAAHA,GAAG;IAHd,KAAAC,QAAQ,GAAG,QAAQ;EAGW;EAEvCC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACF,GAAG,CAACG,GAAG,CAAW,IAAI,CAACF,QAAQ,CAAC;EAC9C;EAEAG,YAAYA,CAACC,MAAc;IACzB,OAAO,IAAI,CAACL,GAAG,CAACM,IAAI,CAAS,IAAI,CAACL,QAAQ,EAAEI,MAAM,CAAC;EACrD;EAEAE,YAAYA,CAACC,EAAU,EAAEH,MAAc;IACrC,OAAO,IAAI,CAACL,GAAG,CAACS,GAAG,CAAS,IAAI,CAACR,QAAQ,EAAEO,EAAE,EAAEH,MAAM,CAAC;EACxD;EAEAK,YAAYA,CAACF,EAAU;IACrB,OAAO,IAAI,CAACR,GAAG,CAACW,MAAM,CAAO,IAAI,CAACV,QAAQ,EAAEO,EAAE,CAAE;EAClD;EACAI,gBAAgBA,CAACC,QAAiB,EAAEC,MAAe;IACjD,IAAIC,KAAK,GAAQ,EAAE;IACnB,IAAIF,QAAQ,EAAEE,KAAK,CAACC,IAAI,GAAGH,QAAQ;IACnC,IAAIC,MAAM,EAAEC,KAAK,CAACE,EAAE,GAAGH,MAAM;IAC7B,OAAO,IAAI,CAACd,GAAG,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,QAAQ,SAAS,EAAEc,KAAK,CAAC;EACnE;;;uBA1BajB,aAAa,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbvB,aAAa;MAAAwB,OAAA,EAAbxB,aAAa,CAAAyB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}